# =============================================================================
# SCRIPT JULIA CON TRY-CATCH AUTOM√ÅTICO EN CADA CAMBIO DE FLUJO
# =============================================================================

using Dates
using HTTP
using JSON3

# Configuraci√≥n
const CONTAINER_NAME = "monitoring_container_$(now())"
const LOKI_URL = "http://localhost:3100"
const PROMETHEUS_URL = "http://localhost:9090"

# =============================================================================
# FUNCI√ìN PRINCIPAL CON TRY-CATCH AUTOM√ÅTICO
# =============================================================================

function pause_for_confirmation(message::String, error_context::String = "")
    """
    Pausa autom√°tica con confirmaci√≥n manual
    """
    println("‚è∏Ô∏è  $message")
    
    if !isempty(error_context)
        println("üìã Contexto del error:")
        println(error_context)
    end
    
    println("üîπ Opciones:")
    println("  [Enter] - Continuar")
    println("  [q] - Quit/Kill")
    println("  [r] - Retry desde esta fase")
    
    while true
        print("üë§ Tu decisi√≥n: ")
        choice = readline()
        
        if choice == ""
            println("‚úÖ Continuando...")
            return :continue
        elseif lowercase(choice) == "q"
            println("üõë Ejecutando Kill...")
            return :kill
        elseif lowercase(choice) == "r"
            println("üîÑ Reintentando...")
            return :retry
        else
            println("‚ùå Opci√≥n no v√°lida. Usa Enter, 'q' o 'r'")
        end
    end
end

function safe_execute(phase_name::String, func::Function, args...; allow_retry::Bool = true)
    """
    Ejecuta una funci√≥n con try-catch autom√°tico y pausa en caso de error
    """
    max_retries = allow_retry ? 3 : 1
    
    for attempt in 1:max_retries
        try
            println("üöÄ Ejecutando fase: $phase_name (intento $attempt/$max_retries)")
            result = func(args...)
            println("‚úÖ Fase '$phase_name' completada exitosamente")
            return result
            
        catch e
            error_msg = "‚ùå ERROR en fase '$phase_name': $e"
            println(error_msg)
            
            if attempt < max_retries
                # Pausa autom√°tica en error con opciones
                decision = pause_for_confirmation(
                    "ERROR en $phase_name - ¬øQu√© hacer?",
                    "Error: $e\nIntento: $attempt/$max_retries"
                )
                
                if decision == :kill
                    cleanup_resources()
                    error("üõë Ejecuci√≥n terminada por el usuario")
                elseif decision == :retry
                    println("üîÑ Reintentando fase '$phase_name'...")
                    continue
                elseif decision == :continue
                    println("‚è≠Ô∏è Saltando fase '$phase_name'...")
                    return nothing
                end
            else
                # √öltima oportunidad
                decision = pause_for_confirmation(
                    "ERROR FINAL en $phase_name - Se agotaron los reintentos",
                    "Error: $e\nIntentos agotados: $max_retries"
                )
                
                if decision == :kill
                    cleanup_resources()
                    error("üõë Ejecuci√≥n terminada por el usuario")
                else
                    println("‚è≠Ô∏è Continuando a pesar del error...")
                    return nothing
                end
            end
        end
    end
end

# =============================================================================
# FUNCIONES DE CADA FASE
# =============================================================================

function setup_monitoring()
    """
    Configurar contenedor de monitoreo
    """
    # Detener contenedor existente si existe
    run(`docker stop $CONTAINER_NAME`, wait=false)
    run(`docker rm $CONTAINER_NAME`, wait=false)
    
    # Crear nuevo contenedor
    run(`docker run -d --name $CONTAINER_NAME -p 3100:3100 grafana/loki:latest -config.file=/etc/loki/local-config.yaml`)
    
    # Verificar que est√© corriendo
    sleep(5)
    result = read(`docker ps`, String)
    if !contains(result, CONTAINER_NAME)
        error("Contenedor no se inici√≥ correctamente")
    end
    
    println("üìä Contenedor $CONTAINER_NAME iniciado exitosamente")
    return true
end

function continuous_monitoring()
    """
    Monitoreo continuo con verificaciones
    """
    for cycle in 1:5  # 5 ciclos de monitoreo
        println("üîç Ciclo de monitoreo #$cycle")
        
        # Verificar estado del contenedor
        result = read(`docker ps`, String)
        if !contains(result, CONTAINER_NAME)
            error("Contenedor $CONTAINER_NAME no est√° corriendo")
        end
        
        # Simular tageo de Loki
        run(`docker exec $CONTAINER_NAME /bin/sh -c "echo 'level=info msg=\"Monitoring cycle $cycle\"' >> /var/log/loki.log"`)
        
        # Simular posible error (20% probabilidad)
        if rand() < 0.2
            error("Error simulado en ciclo $cycle")
        end
        
        println("‚úÖ Ciclo $cycle completado")
        sleep(2)
    end
    
    return true
end

function execute_dumps(dump_type::String = "both")
    """
    Ejecutar dumps seg√∫n el tipo especificado
    """
    timestamp = Dates.format(now(), "yyyymmdd_HHMMSS")
    
    if dump_type in ["loki", "both"]
        println("üìä Ejecutando Loki dump...")
        
        # Simular dump de Loki
        loki_data = Dict("query" => "monitoring", "timestamp" => timestamp)
        open("loki_dump_$timestamp.json", "w") do f
            JSON3.write(f, loki_data)
        end
        
        println("‚úÖ Loki dump completado: loki_dump_$timestamp.json")
    end
    
    if dump_type in ["prometheus", "both"]
        println("üìà Ejecutando Prometheus dump...")
        
        # Simular dump de Prometheus
        prometheus_data = Dict("metric" => "up", "timestamp" => timestamp)
        open("prometheus_dump_$timestamp.json", "w") do f
            JSON3.write(f, prometheus_data)
        end
        
        println("‚úÖ Prometheus dump completado: prometheus_dump_$timestamp.json")
    end
    
    return true
end

function cleanup_resources()
    """
    Limpiar recursos
    """
    println("üßπ Limpiando recursos...")
    
    try
        run(`docker stop $CONTAINER_NAME`)
        run(`docker rm $CONTAINER_NAME`)
        println("‚úÖ Contenedor $CONTAINER_NAME eliminado")
    catch e
        println("‚ö†Ô∏è Error al limpiar contenedor: $e")
    end
    
    # Limpiar archivos temporales
    for file in readdir(".")
        if contains(file, "dump_") && contains(file, ".json")
            println("üóëÔ∏è Limpiando archivo: $file")
            rm(file, force=true)
        end
    end
    
    return true
end

# =============================================================================
# FLUJO PRINCIPAL CON TRY-CATCH AUTOM√ÅTICO
# =============================================================================

function main()
    """
    Flujo principal con try-catch autom√°tico en cada cambio
    """
    println("üéØ Iniciando flujo de monitoreo con try-catch autom√°tico")
    println("üìÖ Timestamp: $(now())")
    println("üê≥ Contenedor: $CONTAINER_NAME")
    println("=" ^ 60)
    
    try
        # FASE 1: Setup con try-catch autom√°tico
        safe_execute("Setup de Monitoreo", setup_monitoring)
        
        # Pausa normal despu√©s de setup exitoso
        decision = pause_for_confirmation("‚úÖ Setup completado - ¬øContinuar con monitoreo?")
        if decision == :kill
            cleanup_resources()
            return
        end
        
        # FASE 2: Monitoreo con try-catch autom√°tico
        safe_execute("Monitoreo Continuo", continuous_monitoring)
        
        # Pausa normal despu√©s de monitoreo exitoso
        decision = pause_for_confirmation("‚úÖ Monitoreo completado - ¬øContinuar con dumps?")
        if decision == :kill
            cleanup_resources()
            return
        end
        
        # Pregunta por tipo de dump
        println("üìã Selecciona tipo de dump:")
        println("  [1] - Loki")
        println("  [2] - Prometheus") 
        println("  [3] - Ambos")
        print("üë§ Tu elecci√≥n (1-3): ")
        
        dump_choice = readline()
        dump_type = if dump_choice == "1"
            "loki"
        elseif dump_choice == "2"
            "prometheus"
        else
            "both"
        end
        
        # FASE 3: Dumps con try-catch autom√°tico
        safe_execute("Ejecuci√≥n de Dumps", execute_dumps, dump_type)
        
        println("üéâ Flujo completado exitosamente!")
        
    catch e
        println("üí• Error no manejado: $e")
        println("üßπ Ejecutando limpieza autom√°tica...")
        cleanup_resources()
        rethrow(e)
    finally
        # Pregunta final sobre limpieza
        decision = pause_for_confirmation("üßπ ¬øEjecutar limpieza de recursos?")
        if decision != :kill
            cleanup_resources()
        end
    end
end

# =============================================================================
# EJECUTAR FLUJO
# =============================================================================

if abspath(PROGRAM_FILE) == @__FILE__
    main()
end

# =============================================================================
# C√ìMO USAR DESDE KESTRA
# =============================================================================

"""
Para usar este script desde Kestra:

1. OPCI√ìN JULIA PURA:
   - Colocar este script en el working directory
   - Ejecutar con: julia monitoring_script.jl

2. OPCI√ìN KESTRA + JULIA:
   
   id: julia_monitoring_flow
   namespace: dev.monitoring
   tasks:
     - id: run_julia_script
       type: io.kestra.plugin.scripts.shell.Commands
       commands:
         - julia monitoring_script.jl
       
       errors:
         - id: julia_error_handler
           type: io.kestra.core.tasks.flows.Pause
           description: "üí• ERROR EN JULIA - Bot√≥n Kill disponible"

VENTAJAS DE JULIA:
‚úÖ Try-catch nativo elegante
‚úÖ Manejo de errores muy robusto
‚úÖ Interactividad simple con readline()
‚úÖ Un solo archivo, un solo script
‚úÖ F√°cil de debuggar y modificar
‚úÖ Retry autom√°tico con contadores
‚úÖ Limpieza autom√°tica en finally
‚úÖ Pause con opciones (continuar/kill/retry)
"""