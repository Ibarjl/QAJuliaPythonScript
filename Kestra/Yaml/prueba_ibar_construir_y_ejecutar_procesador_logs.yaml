id: _prueba_ibar_construir_y_ejecutar_procesador_logs
namespace: core.gt

inputs:
  - id: nombre_archivo_logs # NUEVO INPUT: Para el nombre del archivo de logs subido manualmente
    type: STRING
    description: "Nombre del archivo de logs subido a Kestra Files (ej. mis_logs.txt o mis_logs.json)."
    required: true
  # Los inputs de SSH y IP_Nodo se mantienen comentados ya que estamos en la versión gratuita
  # y no interactuamos con máquinas remotas para el procesamiento de logs.

tasks:
  - id: construir_imagen_julia_processor
    type: io.kestra.plugin.docker.Build
    inputFiles:
      Dockerfile: "{{ read('Dockerfile') }}"
      logs_de_kestra.jl: "{{ read('logs_de_kestra.jl') }}" # Se asegura que el script actualizado se lea
    dockerfile: Dockerfile
    tags:
      - kestra-julia-processor:{{ execution.id }}
    description: "Construyendo la imagen Docker en el worker de Kestra."

  # CAMBIO: Se eliminan todas las tareas relacionadas con la API HTTP de Kestra
  # - id: verificar_conectividad_api
  #   type: io.kestra.plugin.core.http.Request
  #   uri: "http://localhost:8080/api/v1/version"
  #   method: GET
  #   headers:
  #     Accept: "application/json"
  #   allowFailed: true 
  #   description: "Verificar que la API de Kestra esté disponible (puede fallar si el endpoint no existe)."

  # - id: obtener_logs_de_ejecucion
  #   type: io.kestra.plugin.core.http.Request
  #   uri: "http://localhost:8080/api/v1/executions/{{ inputs.id_ejecucion_a_procesar }}/logs"
  #   method: GET
  #   headers:
  #     Authorization: "Basic {{ secret('KESTRA_API_TOKEN') }}"
  #     Content-Type: "application/json"
  #     Accept: "application/json"
  #   options:
  #     timeout:
  #       connectTimeout: "PT30S"
  #       readIdleTimeout: "PT30S"
  #   followRedirects: true
  #   allowFailed: true
  #   description: "Obteniendo los logs de la ejecución de Kestra con autenticación."

  # - id: debug_api_output
  #   type: io.kestra.plugin.core.log.Log
  #   message: |
  #     === DEBUG API RESPONSE ===
  #     Status Code: {{ outputs.obtener_logs_de_ejecucion.code }}
  #     Headers: {{ outputs.obtener_logs_de_ejecucion.headers | json }}
  #     Body Type: {{ outputs.obtener_logs_de_ejecucion.body | type }}
  #     Body Preview: {{ outputs.obtener_logs_de_ejecucion.body | truncate(500) }}
  #     Full Output: {{ outputs.obtener_logs_de_ejecucion | json }}
  #     ========================

  - id: procesar_logs_con_julia
    type: io.kestra.plugin.docker.Run
    containerImage: kestra-julia-processor:{{ execution.id }}
    inputFiles: # NUEVO: Montamos el archivo de logs subido a Kestra Files
      uploaded_log_file: "{{ read(inputs.nombre_archivo_logs) }}"
    commands:
      # CAMBIO: Pasamos la ruta del archivo montado al script de Julia
      - julia /app/logs_de_kestra.jl /app/uploaded_log_file
    outputFiles:
      - "/tmp/reporte_logs.html"
      - "/tmp/distribucion_logs.png" 
      - "/tmp/logs_error.png"
    description: "Ejecutando el script de Julia en el contenedor Docker en el worker de Kestra."

outputs:
  # CAMBIO: Se elimina la salida de logs_capturados de la API
  # - id: logs_capturados
  #   type: STRING
  #   value: "{{ outputs.obtener_logs_de_ejecucion.body }}"
  - id: resultado_del_procesamiento_julia
    type: STRING
    value: "{{ outputs.procesar_logs_con_julia.stdout }}"
  - id: log_html_report
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/reporte_logs.html'] }}"
  - id: log_distribution_plot
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/distribucion_logs.png'] }}"
  - id: log_error_plot
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/logs_error.png'] }}"
