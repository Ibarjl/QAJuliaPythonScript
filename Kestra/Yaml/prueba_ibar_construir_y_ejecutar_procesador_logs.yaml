id: prueba_ibar_construir_y_ejecutar_procesador_logs
namespace: core.gt

inputs:
  - id: id_ejecucion_a_procesar
    type: STRING
    description: "ID de la ejecución de Kestra cuyos logs se van a procesar."
    required: true
  # Los inputs de SSH y IP_Nodo se mantienen comentados ya que estamos en la versión gratuita
  # y no interactuamos con máquinas remotas para el procesamiento de logs.

tasks:
  - id: construir_imagen_julia_processor
    type: io.kestra.plugin.docker.Build
    inputFiles:
      Dockerfile: "{{ read('Dockerfile') }}"
      logs_de_kestra.jl: "{{ read('logs_de_kestra.jl') }}" # Se asegura que el script actualizado se lea
    dockerfile: Dockerfile
    tags:
      - kestra-julia-processor:{{ execution.id }}
    description: "Construyendo la imagen Docker en el worker de Kestra."

  - id: verificar_conectividad_api
    type: io.kestra.plugin.core.http.Request
    uri: "http://localhost:8080/api/v1/version"
    method: GET
    headers:
      Accept: "application/json"
    description: "Verificar que la API de Kestra esté disponible"

  - id: obtener_logs_de_ejecucion
    type: io.kestra.plugin.core.http.Request
    uri: "http://localhost:8080/api/v1/executions/{{ inputs.id_ejecucion_a_procesar }}/logs"
    method: GET
    # CRÍTICO: Configuración de autenticación
    headers:
      Authorization: "Basic {{ secret('KESTRA_API_TOKEN') }}"
      # O si usas Bearer token:
      # Authorization: "Bearer {{ secret('KESTRA_BEARER_TOKEN') }}"
      Content-Type: "application/json"
      Accept: "application/json"
    # Configuración adicional para manejar errores
    options:
      allowBody: true
      timeout: 30000
      followRedirects: true
    description: "Obteniendo los logs de la ejecución de Kestra con autenticación."

  - id: debug_api_output # Tarea de depuración: ¡Muy importante para ver la respuesta de la API!
    type: io.kestra.plugin.core.log.Log
    message: |
      === DEBUG API RESPONSE ===
      Status Code: {{ outputs.obtener_logs_de_ejecucion.code }}
      Headers: {{ outputs.obtener_logs_de_ejecucion.headers | json }}
      Body Type: {{ outputs.obtener_logs_de_ejecucion.body | type }}
      Body Preview: {{ outputs.obtener_logs_de_ejecucion.body | truncate(500) }}
      Full Output: {{ outputs.obtener_logs_de_ejecucion | json }}
      ========================

  - id: procesar_logs_con_julia
    type: io.kestra.plugin.docker.Run
    containerImage: kestra-julia-processor:{{ execution.id }}
    env:
      # CAMBIO: Pasamos el cuerpo completo de la respuesta de la API al script de Julia
      LOGS_JSON_DATA: "{{ outputs.obtener_logs_de_ejecucion.body | escapeJson }}"
    commands:
      - julia /app/logs_de_kestra.jl # El script ahora lee desde ENV
    # CAMBIO: Ahora esperamos múltiples archivos de salida (HTML y PNGs) desde /tmp
    outputFiles:
      - "/tmp/reporte_logs.html"
      - "/tmp/distribucion_logs.png" 
      - "/tmp/logs_error.png"
    description: "Ejecutando el script de Julia en el contenedor Docker en el worker de Kestra."

outputs:
  - id: logs_capturados
    type: STRING
    value: "{{ outputs.obtener_logs_de_ejecucion.body }}" # La salida de la API
  - id: resultado_del_procesamiento_julia
    type: STRING
    value: "{{ outputs.procesar_logs_con_julia.stdout }}"
  - id: log_html_report # Nueva salida para el informe HTML
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/reporte_logs.html'] }}"
  - id: log_distribution_plot # Salida para el PNG de distribución
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/distribucion_logs.png'] }}"
  - id: log_error_plot # Salida para el PNG de errores
    type: FILE
    value: "{{ outputs.procesar_logs_con_julia['/tmp/logs_error.png'] }}"
